1.定义本地函数接口
	如：app/src/main/java/com.jayce.jni/JniUtils.JAVA
	public class JniUtils {
	
		public native String sayHello();
		static {
			System.LoadLibrary(“JniUtils”);
		}
	}

2.生成h文件
	cd app/build/intermediates/classes/debug  (若无此目录，重新build项目)
	javah -jni com.jayce.jni.JniUtils

3.新建jni源文件
	在 app/src/main 目录下创建jni目录，把生成的头文件剪切到该目录
	在jni目录新建jni.cpp 接口函数，如：
	#include “2步骤生成的头文件“
	JNIEXPORT jstring JNICALL Java_com_jayce_jni_JniUtils_sayHello
        (JNIEnv *env, jobject obj){
        return env->NewStringUTF("hello");
	}

4.增加对标准模版库的支持，以及生成so库
	 修改app/build.gradle文件
	buildTypes {
        	release {
          	 minifyEnabled false
           	 proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            	ndk{
                moduleName "JniUtils"             //生成的so名字，在app/build/intermediates/lib/里面
                stl "stlport_static"
                abiFilters "armeabi", "armeabi-v7a", "x86"  //输出指定三种abi体系结构下的so库。
            }
       	}
       	debug{
            ndk{
                moduleName "JniUtils"             //生成的so名字
                stl "stlport_static"
                abiFilters "armeabi", "armeabi-v7a", "x86"  //输出指定三种abi体系结构下的so库。
            }
        }
    }